// Этот файл выполняется перед каждым тестовым ФАЙЛОМ.
// Идеально подходит для настройки jest-dom, глобальных фиктивных объектов или сброса состояний между файлами.

// Импортирует функции Vitest для использования после тестов
// `afterEach` = выполняет что-либо после каждого теста
// `expect` = основная функция для проверки утверждений (результатов тестов)
import { afterEach, expect } from 'vitest';

// Импортирует функцию `cleanup` из тестовой библиотеки
// Она «очищает» DOM после каждого теста, чтобы гарантировать, что один тест не влияет на другой
import { cleanup } from '@testing-library/react';

// Импортирует дополнительные сопоставители jest-dom, адаптированные для Vitest
// Пример: `.toBeInTheDocument()`, `.toHaveAttribute()` и т. д.
// Без этого `expect(...).toBeInTheDocument()` выдаст ошибку
import '@testing-library/jest-dom/vitest';

// Импортирует все сопоставители jest-dom, адаптированные для Vitest
// Это позволяет избежать предупреждений, связанных с act(...) в обновлениях React
// и гарантирует корректную работу сопоставителей, таких как `.toBeInTheDocument()`
import * as matchers from '@testing-library/jest-dom/matchers';
// import { clearDrizzleTodoTable } from '@/core/todo/__tests__/utils/clear-drizzle-todo-table';

// Расширяет глобальный expect с помощью сопоставителей jest-dom
// Без этого вы можете увидеть предупреждение типа «Возможно, вы забыли обернуть обновление в act(...)»
expect.extend(matchers);

// Эта функция запускается автоматически после **каждого** теста
// Она служит для очистки всего и предотвращения влияния одного теста на другой
afterEach(async () => {
  // Очищает DOM между тестами (удаляет то, что было отрисовано)
  cleanup();

  // Сбрасывает все шпионы и фиктивные объекты Vitest (vi.fn, vi.spyOn и т. д.)
  // Гарантирует независимость тестов и отсутствие «мусора» от предыдущих запусков
  vi.resetAllMocks();

  // // Очищает таблицу базы данных, если в ней остался мусор
  // await clearDrizzleTodoTable();
});
